"""
create_multi_model_assistants.py - Erstellt mehrere Assistants mit verschiedenen Modellen

Dieses Script hilft beim Erstellen von OpenAI Assistants mit verschiedenen Modellen,
um eine Modellauswahl in der App zu erm√∂glichen.

Verwendung:
    python create_multi_model_assistants.py
"""

from openai import OpenAI
from dotenv import load_dotenv
import os
import json

# Lade Umgebungsvariablen
load_dotenv()

# Initialisiere OpenAI Client
client = OpenAI()

# Definiere die zu erstellenden Assistants
ASSISTANT_CONFIGS = [
    {
        "name": "EKHN Kirchenrecht Assistant (GPT-4o)",
        "model": "gpt-4o",
        "description": "H√∂chste Qualit√§t, umfassende Antworten",
        "key": "GPT-4o (Standard - Beste Qualit√§t)"
    },
    {
        "name": "EKHN Kirchenrecht Assistant (GPT-3.5 Turbo)",
        "model": "gpt-3.5-turbo",
        "description": "Schnellere Antworten, gute Qualit√§t",
        "key": "GPT-3.5-Turbo (Schnell)"
    },
    {
        "name": "EKHN Kirchenrecht Assistant (GPT-4 Turbo)",
        "model": "gpt-4-turbo-preview",
        "description": "Balance zwischen Geschwindigkeit und Qualit√§t",
        "key": "GPT-4-Turbo (Ausgewogen)"
    }
]

# Gemeinsame Instruktionen f√ºr alle Assistants
INSTRUCTIONS = """
Du bist ein Experte f√ºr das Kirchenrecht der EKHN (Evangelische Kirche in Hessen und Nassau). 
Antworte klar, kurz und mit Paragraphenangabe. 
Beziehe dich auf relevante kirchenrechtliche Dokumente und Bestimmungen. 
Wenn du dir unsicher bist, weise darauf hin und empfehle eine juristische Pr√ºfung.
"""

def create_assistants():
    """Erstellt Assistants f√ºr verschiedene Modelle"""
    created_assistants = {}
    
    print("üîß Erstelle OpenAI Assistants f√ºr verschiedene Modelle...\n")
    
    for config in ASSISTANT_CONFIGS:
        try:
            print(f"üìã Erstelle Assistant f√ºr {config['model']}...")
            
            # Erstelle den Assistant
            assistant = client.beta.assistants.create(
                name=config["name"],
                model=config["model"],
                instructions=INSTRUCTIONS,
                tools=[{"type": "file_search"}]  # Aktiviere File Search (fr√ºher Retrieval)
            )
            
            # Speichere die Assistant-Informationen
            created_assistants[config["key"]] = {
                "id": assistant.id,
                "description": config["description"],
                "model": config["model"]
            }
            
            print(f"‚úÖ Erfolgreich erstellt!")
            print(f"   ID: {assistant.id}")
            print(f"   Name: {assistant.name}")
            print(f"   Model: {assistant.model}\n")
            
        except Exception as e:
            print(f"‚ùå Fehler beim Erstellen von {config['model']}: {e}\n")
    
    return created_assistants

def save_assistant_config(assistants):
    """Speichert die Assistant-Konfiguration in einer Datei"""
    config_file = "assistant_config.json"
    
    with open(config_file, "w", encoding="utf-8") as f:
        json.dump(assistants, f, indent=2, ensure_ascii=False)
    
    print(f"üíæ Konfiguration gespeichert in '{config_file}'")
    
    # Erstelle auch Python-Code zum Kopieren
    print("\nüìù Kopieren Sie folgende Konfiguration in Ihre app.py:\n")
    print("ASSISTANTS = {")
    for key, value in assistants.items():
        print(f'    "{key}": {{')
        print(f'        "id": "{value["id"]}",')
        print(f'        "description": "{value["description"]}",')
        print(f'        "model": "{value["model"]}"')
        print("    },")
    print("}")

def main():
    print("=" * 60)
    print("MULTI-MODEL ASSISTANT CREATOR")
    print("=" * 60)
    print("\nDieses Script erstellt mehrere OpenAI Assistants mit")
    print("verschiedenen Modellen f√ºr die Kirchenrechts-App.\n")
    
    # Sicherheitsabfrage
    response = input("‚ö†Ô∏è  ACHTUNG: Dies erstellt neue Assistants und kann Kosten verursachen.\n"
                    "M√∂chten Sie fortfahren? (ja/nein): ")
    
    if response.lower() != "ja":
        print("\n‚ùå Abgebrochen.")
        return
    
    print("\n")
    
    # Erstelle die Assistants
    created = create_assistants()
    
    if created:
        # Speichere die Konfiguration
        save_assistant_config(created)
        
        print("\n‚úÖ Fertig! Sie k√∂nnen nun die Modellauswahl in der App nutzen.")
        print("\nN√§chste Schritte:")
        print("1. Kopieren Sie die ASSISTANTS-Konfiguration in app.py")
        print("2. Starten Sie die App neu")
        print("3. Die Modellauswahl sollte nun verf√ºgbar sein")
    else:
        print("\n‚ùå Es wurden keine Assistants erstellt.")

if __name__ == "__main__":
    main()